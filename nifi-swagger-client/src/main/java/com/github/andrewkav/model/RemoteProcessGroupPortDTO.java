/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.andrewkav.model.BatchSettingsDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RemoteProcessGroupPortDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-07-24T10:52:32.266Z[GMT]")
public class RemoteProcessGroupPortDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_VERSIONED_COMPONENT_ID = "versionedComponentId";
  @SerializedName(SERIALIZED_NAME_VERSIONED_COMPONENT_ID)
  private String versionedComponentId;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CONCURRENTLY_SCHEDULABLE_TASK_COUNT = "concurrentlySchedulableTaskCount";
  @SerializedName(SERIALIZED_NAME_CONCURRENTLY_SCHEDULABLE_TASK_COUNT)
  private Integer concurrentlySchedulableTaskCount;

  public static final String SERIALIZED_NAME_TRANSMITTING = "transmitting";
  @SerializedName(SERIALIZED_NAME_TRANSMITTING)
  private Boolean transmitting;

  public static final String SERIALIZED_NAME_USE_COMPRESSION = "useCompression";
  @SerializedName(SERIALIZED_NAME_USE_COMPRESSION)
  private Boolean useCompression;

  public static final String SERIALIZED_NAME_EXISTS = "exists";
  @SerializedName(SERIALIZED_NAME_EXISTS)
  private Boolean exists;

  public static final String SERIALIZED_NAME_TARGET_RUNNING = "targetRunning";
  @SerializedName(SERIALIZED_NAME_TARGET_RUNNING)
  private Boolean targetRunning;

  public static final String SERIALIZED_NAME_CONNECTED = "connected";
  @SerializedName(SERIALIZED_NAME_CONNECTED)
  private Boolean connected;

  public static final String SERIALIZED_NAME_BATCH_SETTINGS = "batchSettings";
  @SerializedName(SERIALIZED_NAME_BATCH_SETTINGS)
  private BatchSettingsDTO batchSettings = null;

  public RemoteProcessGroupPortDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the port.
   * @return id
  **/
  @ApiModelProperty(value = "The id of the port.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RemoteProcessGroupPortDTO targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

   /**
   * The id of the target port.
   * @return targetId
  **/
  @ApiModelProperty(value = "The id of the target port.")
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }

  public RemoteProcessGroupPortDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @ApiModelProperty(value = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }

  public RemoteProcessGroupPortDTO groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * The id of the remote process group that the port resides in.
   * @return groupId
  **/
  @ApiModelProperty(value = "The id of the remote process group that the port resides in.")
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }

  public RemoteProcessGroupPortDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the target port.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the target port.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public RemoteProcessGroupPortDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments as configured on the target port.
   * @return comments
  **/
  @ApiModelProperty(value = "The comments as configured on the target port.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public RemoteProcessGroupPortDTO concurrentlySchedulableTaskCount(Integer concurrentlySchedulableTaskCount) {
    this.concurrentlySchedulableTaskCount = concurrentlySchedulableTaskCount;
    return this;
  }

   /**
   * The number of task that may transmit flowfiles to the target port concurrently.
   * @return concurrentlySchedulableTaskCount
  **/
  @ApiModelProperty(value = "The number of task that may transmit flowfiles to the target port concurrently.")
  public Integer getConcurrentlySchedulableTaskCount() {
    return concurrentlySchedulableTaskCount;
  }

  public void setConcurrentlySchedulableTaskCount(Integer concurrentlySchedulableTaskCount) {
    this.concurrentlySchedulableTaskCount = concurrentlySchedulableTaskCount;
  }

  public RemoteProcessGroupPortDTO transmitting(Boolean transmitting) {
    this.transmitting = transmitting;
    return this;
  }

   /**
   * Whether the remote port is configured for transmission.
   * @return transmitting
  **/
  @ApiModelProperty(value = "Whether the remote port is configured for transmission.")
  public Boolean getTransmitting() {
    return transmitting;
  }

  public void setTransmitting(Boolean transmitting) {
    this.transmitting = transmitting;
  }

  public RemoteProcessGroupPortDTO useCompression(Boolean useCompression) {
    this.useCompression = useCompression;
    return this;
  }

   /**
   * Whether the flowfiles are compressed when sent to the target port.
   * @return useCompression
  **/
  @ApiModelProperty(value = "Whether the flowfiles are compressed when sent to the target port.")
  public Boolean getUseCompression() {
    return useCompression;
  }

  public void setUseCompression(Boolean useCompression) {
    this.useCompression = useCompression;
  }

  public RemoteProcessGroupPortDTO exists(Boolean exists) {
    this.exists = exists;
    return this;
  }

   /**
   * Whether the target port exists.
   * @return exists
  **/
  @ApiModelProperty(value = "Whether the target port exists.")
  public Boolean getExists() {
    return exists;
  }

  public void setExists(Boolean exists) {
    this.exists = exists;
  }

  public RemoteProcessGroupPortDTO targetRunning(Boolean targetRunning) {
    this.targetRunning = targetRunning;
    return this;
  }

   /**
   * Whether the target port is running.
   * @return targetRunning
  **/
  @ApiModelProperty(value = "Whether the target port is running.")
  public Boolean getTargetRunning() {
    return targetRunning;
  }

  public void setTargetRunning(Boolean targetRunning) {
    this.targetRunning = targetRunning;
  }

  public RemoteProcessGroupPortDTO connected(Boolean connected) {
    this.connected = connected;
    return this;
  }

   /**
   * Whether the port has either an incoming or outgoing connection.
   * @return connected
  **/
  @ApiModelProperty(value = "Whether the port has either an incoming or outgoing connection.")
  public Boolean getConnected() {
    return connected;
  }

  public void setConnected(Boolean connected) {
    this.connected = connected;
  }

  public RemoteProcessGroupPortDTO batchSettings(BatchSettingsDTO batchSettings) {
    this.batchSettings = batchSettings;
    return this;
  }

   /**
   * Get batchSettings
   * @return batchSettings
  **/
  @ApiModelProperty(value = "")
  public BatchSettingsDTO getBatchSettings() {
    return batchSettings;
  }

  public void setBatchSettings(BatchSettingsDTO batchSettings) {
    this.batchSettings = batchSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteProcessGroupPortDTO remoteProcessGroupPortDTO = (RemoteProcessGroupPortDTO) o;
    return Objects.equals(this.id, remoteProcessGroupPortDTO.id) &&
        Objects.equals(this.targetId, remoteProcessGroupPortDTO.targetId) &&
        Objects.equals(this.versionedComponentId, remoteProcessGroupPortDTO.versionedComponentId) &&
        Objects.equals(this.groupId, remoteProcessGroupPortDTO.groupId) &&
        Objects.equals(this.name, remoteProcessGroupPortDTO.name) &&
        Objects.equals(this.comments, remoteProcessGroupPortDTO.comments) &&
        Objects.equals(this.concurrentlySchedulableTaskCount, remoteProcessGroupPortDTO.concurrentlySchedulableTaskCount) &&
        Objects.equals(this.transmitting, remoteProcessGroupPortDTO.transmitting) &&
        Objects.equals(this.useCompression, remoteProcessGroupPortDTO.useCompression) &&
        Objects.equals(this.exists, remoteProcessGroupPortDTO.exists) &&
        Objects.equals(this.targetRunning, remoteProcessGroupPortDTO.targetRunning) &&
        Objects.equals(this.connected, remoteProcessGroupPortDTO.connected) &&
        Objects.equals(this.batchSettings, remoteProcessGroupPortDTO.batchSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, targetId, versionedComponentId, groupId, name, comments, concurrentlySchedulableTaskCount, transmitting, useCompression, exists, targetRunning, connected, batchSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteProcessGroupPortDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    concurrentlySchedulableTaskCount: ").append(toIndentedString(concurrentlySchedulableTaskCount)).append("\n");
    sb.append("    transmitting: ").append(toIndentedString(transmitting)).append("\n");
    sb.append("    useCompression: ").append(toIndentedString(useCompression)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    targetRunning: ").append(toIndentedString(targetRunning)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    batchSettings: ").append(toIndentedString(batchSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

