/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.andrewkav.model.AllowableValueEntity;
import com.github.andrewkav.model.BundleDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PropertyDescriptorDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-07-24T10:52:32.266Z[GMT]")
public class PropertyDescriptorDTO {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_ALLOWABLE_VALUES = "allowableValues";
  @SerializedName(SERIALIZED_NAME_ALLOWABLE_VALUES)
  private List<AllowableValueEntity> allowableValues = new ArrayList<AllowableValueEntity>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private Boolean sensitive;

  public static final String SERIALIZED_NAME_DYNAMIC = "dynamic";
  @SerializedName(SERIALIZED_NAME_DYNAMIC)
  private Boolean dynamic;

  public static final String SERIALIZED_NAME_SUPPORTS_EL = "supportsEl";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_EL)
  private Boolean supportsEl;

  public static final String SERIALIZED_NAME_EXPRESSION_LANGUAGE_SCOPE = "expressionLanguageScope";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_LANGUAGE_SCOPE)
  private String expressionLanguageScope;

  public static final String SERIALIZED_NAME_IDENTIFIES_CONTROLLER_SERVICE = "identifiesControllerService";
  @SerializedName(SERIALIZED_NAME_IDENTIFIES_CONTROLLER_SERVICE)
  private String identifiesControllerService;

  public static final String SERIALIZED_NAME_IDENTIFIES_CONTROLLER_SERVICE_BUNDLE = "identifiesControllerServiceBundle";
  @SerializedName(SERIALIZED_NAME_IDENTIFIES_CONTROLLER_SERVICE_BUNDLE)
  private BundleDTO identifiesControllerServiceBundle = null;

  public PropertyDescriptorDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name for the property.
   * @return name
  **/
  @ApiModelProperty(value = "The name for the property.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PropertyDescriptorDTO displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The human readable name for the property.
   * @return displayName
  **/
  @ApiModelProperty(value = "The human readable name for the property.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public PropertyDescriptorDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description for the property. Used to relay additional details to a user or provide a mechanism of documenting intent.
   * @return description
  **/
  @ApiModelProperty(value = "The description for the property. Used to relay additional details to a user or provide a mechanism of documenting intent.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PropertyDescriptorDTO defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value for the property.
   * @return defaultValue
  **/
  @ApiModelProperty(value = "The default value for the property.")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public PropertyDescriptorDTO allowableValues(List<AllowableValueEntity> allowableValues) {
    this.allowableValues = allowableValues;
    return this;
  }

  public PropertyDescriptorDTO addAllowableValuesItem(AllowableValueEntity allowableValuesItem) {
    if (this.allowableValues == null) {
      this.allowableValues = new ArrayList<AllowableValueEntity>();
    }
    this.allowableValues.add(allowableValuesItem);
    return this;
  }

   /**
   * Allowable values for the property. If empty then the allowed values are not constrained.
   * @return allowableValues
  **/
  @ApiModelProperty(value = "Allowable values for the property. If empty then the allowed values are not constrained.")
  public List<AllowableValueEntity> getAllowableValues() {
    return allowableValues;
  }

  public void setAllowableValues(List<AllowableValueEntity> allowableValues) {
    this.allowableValues = allowableValues;
  }

  public PropertyDescriptorDTO required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Whether the property is required.
   * @return required
  **/
  @ApiModelProperty(value = "Whether the property is required.")
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public PropertyDescriptorDTO sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

   /**
   * Whether the property is sensitive and protected whenever stored or represented.
   * @return sensitive
  **/
  @ApiModelProperty(value = "Whether the property is sensitive and protected whenever stored or represented.")
  public Boolean getSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }

  public PropertyDescriptorDTO dynamic(Boolean dynamic) {
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Whether the property is dynamic (user-defined).
   * @return dynamic
  **/
  @ApiModelProperty(value = "Whether the property is dynamic (user-defined).")
  public Boolean getDynamic() {
    return dynamic;
  }

  public void setDynamic(Boolean dynamic) {
    this.dynamic = dynamic;
  }

  public PropertyDescriptorDTO supportsEl(Boolean supportsEl) {
    this.supportsEl = supportsEl;
    return this;
  }

   /**
   * Whether the property supports expression language.
   * @return supportsEl
  **/
  @ApiModelProperty(value = "Whether the property supports expression language.")
  public Boolean getSupportsEl() {
    return supportsEl;
  }

  public void setSupportsEl(Boolean supportsEl) {
    this.supportsEl = supportsEl;
  }

  public PropertyDescriptorDTO expressionLanguageScope(String expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
    return this;
  }

   /**
   * Scope of the Expression Language evaluation for the property.
   * @return expressionLanguageScope
  **/
  @ApiModelProperty(value = "Scope of the Expression Language evaluation for the property.")
  public String getExpressionLanguageScope() {
    return expressionLanguageScope;
  }

  public void setExpressionLanguageScope(String expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
  }

  public PropertyDescriptorDTO identifiesControllerService(String identifiesControllerService) {
    this.identifiesControllerService = identifiesControllerService;
    return this;
  }

   /**
   * If the property identifies a controller service this returns the fully qualified type.
   * @return identifiesControllerService
  **/
  @ApiModelProperty(value = "If the property identifies a controller service this returns the fully qualified type.")
  public String getIdentifiesControllerService() {
    return identifiesControllerService;
  }

  public void setIdentifiesControllerService(String identifiesControllerService) {
    this.identifiesControllerService = identifiesControllerService;
  }

  public PropertyDescriptorDTO identifiesControllerServiceBundle(BundleDTO identifiesControllerServiceBundle) {
    this.identifiesControllerServiceBundle = identifiesControllerServiceBundle;
    return this;
  }

   /**
   * Get identifiesControllerServiceBundle
   * @return identifiesControllerServiceBundle
  **/
  @ApiModelProperty(value = "")
  public BundleDTO getIdentifiesControllerServiceBundle() {
    return identifiesControllerServiceBundle;
  }

  public void setIdentifiesControllerServiceBundle(BundleDTO identifiesControllerServiceBundle) {
    this.identifiesControllerServiceBundle = identifiesControllerServiceBundle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDescriptorDTO propertyDescriptorDTO = (PropertyDescriptorDTO) o;
    return Objects.equals(this.name, propertyDescriptorDTO.name) &&
        Objects.equals(this.displayName, propertyDescriptorDTO.displayName) &&
        Objects.equals(this.description, propertyDescriptorDTO.description) &&
        Objects.equals(this.defaultValue, propertyDescriptorDTO.defaultValue) &&
        Objects.equals(this.allowableValues, propertyDescriptorDTO.allowableValues) &&
        Objects.equals(this.required, propertyDescriptorDTO.required) &&
        Objects.equals(this.sensitive, propertyDescriptorDTO.sensitive) &&
        Objects.equals(this.dynamic, propertyDescriptorDTO.dynamic) &&
        Objects.equals(this.supportsEl, propertyDescriptorDTO.supportsEl) &&
        Objects.equals(this.expressionLanguageScope, propertyDescriptorDTO.expressionLanguageScope) &&
        Objects.equals(this.identifiesControllerService, propertyDescriptorDTO.identifiesControllerService) &&
        Objects.equals(this.identifiesControllerServiceBundle, propertyDescriptorDTO.identifiesControllerServiceBundle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, description, defaultValue, allowableValues, required, sensitive, dynamic, supportsEl, expressionLanguageScope, identifiesControllerService, identifiesControllerServiceBundle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDescriptorDTO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    allowableValues: ").append(toIndentedString(allowableValues)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    supportsEl: ").append(toIndentedString(supportsEl)).append("\n");
    sb.append("    expressionLanguageScope: ").append(toIndentedString(expressionLanguageScope)).append("\n");
    sb.append("    identifiesControllerService: ").append(toIndentedString(identifiesControllerService)).append("\n");
    sb.append("    identifiesControllerServiceBundle: ").append(toIndentedString(identifiesControllerServiceBundle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

