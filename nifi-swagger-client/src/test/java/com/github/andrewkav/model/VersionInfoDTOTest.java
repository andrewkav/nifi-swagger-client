/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for VersionInfoDTO
 */
public class VersionInfoDTOTest {
    private final VersionInfoDTO model = new VersionInfoDTO();

    /**
     * Model tests for VersionInfoDTO
     */
    @Test
    public void testVersionInfoDTO() {
        // TODO: test VersionInfoDTO
    }

    /**
     * Test the property 'niFiVersion'
     */
    @Test
    public void niFiVersionTest() {
        // TODO: test niFiVersion
    }

    /**
     * Test the property 'javaVendor'
     */
    @Test
    public void javaVendorTest() {
        // TODO: test javaVendor
    }

    /**
     * Test the property 'javaVersion'
     */
    @Test
    public void javaVersionTest() {
        // TODO: test javaVersion
    }

    /**
     * Test the property 'osName'
     */
    @Test
    public void osNameTest() {
        // TODO: test osName
    }

    /**
     * Test the property 'osVersion'
     */
    @Test
    public void osVersionTest() {
        // TODO: test osVersion
    }

    /**
     * Test the property 'osArchitecture'
     */
    @Test
    public void osArchitectureTest() {
        // TODO: test osArchitecture
    }

    /**
     * Test the property 'buildTag'
     */
    @Test
    public void buildTagTest() {
        // TODO: test buildTag
    }

    /**
     * Test the property 'buildRevision'
     */
    @Test
    public void buildRevisionTest() {
        // TODO: test buildRevision
    }

    /**
     * Test the property 'buildBranch'
     */
    @Test
    public void buildBranchTest() {
        // TODO: test buildBranch
    }

    /**
     * Test the property 'buildTimestamp'
     */
    @Test
    public void buildTimestampTest() {
        // TODO: test buildTimestamp
    }

}
