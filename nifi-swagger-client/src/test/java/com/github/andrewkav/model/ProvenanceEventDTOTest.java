/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import com.github.andrewkav.model.AttributeDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ProvenanceEventDTO
 */
public class ProvenanceEventDTOTest {
    private final ProvenanceEventDTO model = new ProvenanceEventDTO();

    /**
     * Model tests for ProvenanceEventDTO
     */
    @Test
    public void testProvenanceEventDTO() {
        // TODO: test ProvenanceEventDTO
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'eventId'
     */
    @Test
    public void eventIdTest() {
        // TODO: test eventId
    }

    /**
     * Test the property 'eventTime'
     */
    @Test
    public void eventTimeTest() {
        // TODO: test eventTime
    }

    /**
     * Test the property 'eventDuration'
     */
    @Test
    public void eventDurationTest() {
        // TODO: test eventDuration
    }

    /**
     * Test the property 'lineageDuration'
     */
    @Test
    public void lineageDurationTest() {
        // TODO: test lineageDuration
    }

    /**
     * Test the property 'eventType'
     */
    @Test
    public void eventTypeTest() {
        // TODO: test eventType
    }

    /**
     * Test the property 'flowFileUuid'
     */
    @Test
    public void flowFileUuidTest() {
        // TODO: test flowFileUuid
    }

    /**
     * Test the property 'fileSize'
     */
    @Test
    public void fileSizeTest() {
        // TODO: test fileSize
    }

    /**
     * Test the property 'fileSizeBytes'
     */
    @Test
    public void fileSizeBytesTest() {
        // TODO: test fileSizeBytes
    }

    /**
     * Test the property 'clusterNodeId'
     */
    @Test
    public void clusterNodeIdTest() {
        // TODO: test clusterNodeId
    }

    /**
     * Test the property 'clusterNodeAddress'
     */
    @Test
    public void clusterNodeAddressTest() {
        // TODO: test clusterNodeAddress
    }

    /**
     * Test the property 'groupId'
     */
    @Test
    public void groupIdTest() {
        // TODO: test groupId
    }

    /**
     * Test the property 'componentId'
     */
    @Test
    public void componentIdTest() {
        // TODO: test componentId
    }

    /**
     * Test the property 'componentType'
     */
    @Test
    public void componentTypeTest() {
        // TODO: test componentType
    }

    /**
     * Test the property 'componentName'
     */
    @Test
    public void componentNameTest() {
        // TODO: test componentName
    }

    /**
     * Test the property 'sourceSystemFlowFileId'
     */
    @Test
    public void sourceSystemFlowFileIdTest() {
        // TODO: test sourceSystemFlowFileId
    }

    /**
     * Test the property 'alternateIdentifierUri'
     */
    @Test
    public void alternateIdentifierUriTest() {
        // TODO: test alternateIdentifierUri
    }

    /**
     * Test the property 'attributes'
     */
    @Test
    public void attributesTest() {
        // TODO: test attributes
    }

    /**
     * Test the property 'parentUuids'
     */
    @Test
    public void parentUuidsTest() {
        // TODO: test parentUuids
    }

    /**
     * Test the property 'childUuids'
     */
    @Test
    public void childUuidsTest() {
        // TODO: test childUuids
    }

    /**
     * Test the property 'transitUri'
     */
    @Test
    public void transitUriTest() {
        // TODO: test transitUri
    }

    /**
     * Test the property 'relationship'
     */
    @Test
    public void relationshipTest() {
        // TODO: test relationship
    }

    /**
     * Test the property 'details'
     */
    @Test
    public void detailsTest() {
        // TODO: test details
    }

    /**
     * Test the property 'contentEqual'
     */
    @Test
    public void contentEqualTest() {
        // TODO: test contentEqual
    }

    /**
     * Test the property 'inputContentAvailable'
     */
    @Test
    public void inputContentAvailableTest() {
        // TODO: test inputContentAvailable
    }

    /**
     * Test the property 'inputContentClaimSection'
     */
    @Test
    public void inputContentClaimSectionTest() {
        // TODO: test inputContentClaimSection
    }

    /**
     * Test the property 'inputContentClaimContainer'
     */
    @Test
    public void inputContentClaimContainerTest() {
        // TODO: test inputContentClaimContainer
    }

    /**
     * Test the property 'inputContentClaimIdentifier'
     */
    @Test
    public void inputContentClaimIdentifierTest() {
        // TODO: test inputContentClaimIdentifier
    }

    /**
     * Test the property 'inputContentClaimOffset'
     */
    @Test
    public void inputContentClaimOffsetTest() {
        // TODO: test inputContentClaimOffset
    }

    /**
     * Test the property 'inputContentClaimFileSize'
     */
    @Test
    public void inputContentClaimFileSizeTest() {
        // TODO: test inputContentClaimFileSize
    }

    /**
     * Test the property 'inputContentClaimFileSizeBytes'
     */
    @Test
    public void inputContentClaimFileSizeBytesTest() {
        // TODO: test inputContentClaimFileSizeBytes
    }

    /**
     * Test the property 'outputContentAvailable'
     */
    @Test
    public void outputContentAvailableTest() {
        // TODO: test outputContentAvailable
    }

    /**
     * Test the property 'outputContentClaimSection'
     */
    @Test
    public void outputContentClaimSectionTest() {
        // TODO: test outputContentClaimSection
    }

    /**
     * Test the property 'outputContentClaimContainer'
     */
    @Test
    public void outputContentClaimContainerTest() {
        // TODO: test outputContentClaimContainer
    }

    /**
     * Test the property 'outputContentClaimIdentifier'
     */
    @Test
    public void outputContentClaimIdentifierTest() {
        // TODO: test outputContentClaimIdentifier
    }

    /**
     * Test the property 'outputContentClaimOffset'
     */
    @Test
    public void outputContentClaimOffsetTest() {
        // TODO: test outputContentClaimOffset
    }

    /**
     * Test the property 'outputContentClaimFileSize'
     */
    @Test
    public void outputContentClaimFileSizeTest() {
        // TODO: test outputContentClaimFileSize
    }

    /**
     * Test the property 'outputContentClaimFileSizeBytes'
     */
    @Test
    public void outputContentClaimFileSizeBytesTest() {
        // TODO: test outputContentClaimFileSizeBytes
    }

    /**
     * Test the property 'replayAvailable'
     */
    @Test
    public void replayAvailableTest() {
        // TODO: test replayAvailable
    }

    /**
     * Test the property 'replayExplanation'
     */
    @Test
    public void replayExplanationTest() {
        // TODO: test replayExplanation
    }

    /**
     * Test the property 'sourceConnectionIdentifier'
     */
    @Test
    public void sourceConnectionIdentifierTest() {
        // TODO: test sourceConnectionIdentifier
    }

}
