/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ConnectionStatusSnapshotDTO
 */
public class ConnectionStatusSnapshotDTOTest {
    private final ConnectionStatusSnapshotDTO model = new ConnectionStatusSnapshotDTO();

    /**
     * Model tests for ConnectionStatusSnapshotDTO
     */
    @Test
    public void testConnectionStatusSnapshotDTO() {
        // TODO: test ConnectionStatusSnapshotDTO
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'groupId'
     */
    @Test
    public void groupIdTest() {
        // TODO: test groupId
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'sourceId'
     */
    @Test
    public void sourceIdTest() {
        // TODO: test sourceId
    }

    /**
     * Test the property 'sourceName'
     */
    @Test
    public void sourceNameTest() {
        // TODO: test sourceName
    }

    /**
     * Test the property 'destinationId'
     */
    @Test
    public void destinationIdTest() {
        // TODO: test destinationId
    }

    /**
     * Test the property 'destinationName'
     */
    @Test
    public void destinationNameTest() {
        // TODO: test destinationName
    }

    /**
     * Test the property 'flowFilesIn'
     */
    @Test
    public void flowFilesInTest() {
        // TODO: test flowFilesIn
    }

    /**
     * Test the property 'bytesIn'
     */
    @Test
    public void bytesInTest() {
        // TODO: test bytesIn
    }

    /**
     * Test the property 'input'
     */
    @Test
    public void inputTest() {
        // TODO: test input
    }

    /**
     * Test the property 'flowFilesOut'
     */
    @Test
    public void flowFilesOutTest() {
        // TODO: test flowFilesOut
    }

    /**
     * Test the property 'bytesOut'
     */
    @Test
    public void bytesOutTest() {
        // TODO: test bytesOut
    }

    /**
     * Test the property 'output'
     */
    @Test
    public void outputTest() {
        // TODO: test output
    }

    /**
     * Test the property 'flowFilesQueued'
     */
    @Test
    public void flowFilesQueuedTest() {
        // TODO: test flowFilesQueued
    }

    /**
     * Test the property 'bytesQueued'
     */
    @Test
    public void bytesQueuedTest() {
        // TODO: test bytesQueued
    }

    /**
     * Test the property 'queued'
     */
    @Test
    public void queuedTest() {
        // TODO: test queued
    }

    /**
     * Test the property 'queuedSize'
     */
    @Test
    public void queuedSizeTest() {
        // TODO: test queuedSize
    }

    /**
     * Test the property 'queuedCount'
     */
    @Test
    public void queuedCountTest() {
        // TODO: test queuedCount
    }

    /**
     * Test the property 'percentUseCount'
     */
    @Test
    public void percentUseCountTest() {
        // TODO: test percentUseCount
    }

    /**
     * Test the property 'percentUseBytes'
     */
    @Test
    public void percentUseBytesTest() {
        // TODO: test percentUseBytes
    }

}
