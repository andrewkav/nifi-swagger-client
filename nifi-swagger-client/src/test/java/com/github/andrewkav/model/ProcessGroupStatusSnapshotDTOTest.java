/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import com.github.andrewkav.model.ConnectionStatusSnapshotEntity;
import com.github.andrewkav.model.PortStatusSnapshotEntity;
import com.github.andrewkav.model.ProcessGroupStatusSnapshotEntity;
import com.github.andrewkav.model.ProcessorStatusSnapshotEntity;
import com.github.andrewkav.model.RemoteProcessGroupStatusSnapshotEntity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ProcessGroupStatusSnapshotDTO
 */
public class ProcessGroupStatusSnapshotDTOTest {
    private final ProcessGroupStatusSnapshotDTO model = new ProcessGroupStatusSnapshotDTO();

    /**
     * Model tests for ProcessGroupStatusSnapshotDTO
     */
    @Test
    public void testProcessGroupStatusSnapshotDTO() {
        // TODO: test ProcessGroupStatusSnapshotDTO
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'connectionStatusSnapshots'
     */
    @Test
    public void connectionStatusSnapshotsTest() {
        // TODO: test connectionStatusSnapshots
    }

    /**
     * Test the property 'processorStatusSnapshots'
     */
    @Test
    public void processorStatusSnapshotsTest() {
        // TODO: test processorStatusSnapshots
    }

    /**
     * Test the property 'processGroupStatusSnapshots'
     */
    @Test
    public void processGroupStatusSnapshotsTest() {
        // TODO: test processGroupStatusSnapshots
    }

    /**
     * Test the property 'remoteProcessGroupStatusSnapshots'
     */
    @Test
    public void remoteProcessGroupStatusSnapshotsTest() {
        // TODO: test remoteProcessGroupStatusSnapshots
    }

    /**
     * Test the property 'inputPortStatusSnapshots'
     */
    @Test
    public void inputPortStatusSnapshotsTest() {
        // TODO: test inputPortStatusSnapshots
    }

    /**
     * Test the property 'outputPortStatusSnapshots'
     */
    @Test
    public void outputPortStatusSnapshotsTest() {
        // TODO: test outputPortStatusSnapshots
    }

    /**
     * Test the property 'versionedFlowState'
     */
    @Test
    public void versionedFlowStateTest() {
        // TODO: test versionedFlowState
    }

    /**
     * Test the property 'flowFilesIn'
     */
    @Test
    public void flowFilesInTest() {
        // TODO: test flowFilesIn
    }

    /**
     * Test the property 'bytesIn'
     */
    @Test
    public void bytesInTest() {
        // TODO: test bytesIn
    }

    /**
     * Test the property 'input'
     */
    @Test
    public void inputTest() {
        // TODO: test input
    }

    /**
     * Test the property 'flowFilesQueued'
     */
    @Test
    public void flowFilesQueuedTest() {
        // TODO: test flowFilesQueued
    }

    /**
     * Test the property 'bytesQueued'
     */
    @Test
    public void bytesQueuedTest() {
        // TODO: test bytesQueued
    }

    /**
     * Test the property 'queued'
     */
    @Test
    public void queuedTest() {
        // TODO: test queued
    }

    /**
     * Test the property 'queuedCount'
     */
    @Test
    public void queuedCountTest() {
        // TODO: test queuedCount
    }

    /**
     * Test the property 'queuedSize'
     */
    @Test
    public void queuedSizeTest() {
        // TODO: test queuedSize
    }

    /**
     * Test the property 'bytesRead'
     */
    @Test
    public void bytesReadTest() {
        // TODO: test bytesRead
    }

    /**
     * Test the property 'read'
     */
    @Test
    public void readTest() {
        // TODO: test read
    }

    /**
     * Test the property 'bytesWritten'
     */
    @Test
    public void bytesWrittenTest() {
        // TODO: test bytesWritten
    }

    /**
     * Test the property 'written'
     */
    @Test
    public void writtenTest() {
        // TODO: test written
    }

    /**
     * Test the property 'flowFilesOut'
     */
    @Test
    public void flowFilesOutTest() {
        // TODO: test flowFilesOut
    }

    /**
     * Test the property 'bytesOut'
     */
    @Test
    public void bytesOutTest() {
        // TODO: test bytesOut
    }

    /**
     * Test the property 'output'
     */
    @Test
    public void outputTest() {
        // TODO: test output
    }

    /**
     * Test the property 'flowFilesTransferred'
     */
    @Test
    public void flowFilesTransferredTest() {
        // TODO: test flowFilesTransferred
    }

    /**
     * Test the property 'bytesTransferred'
     */
    @Test
    public void bytesTransferredTest() {
        // TODO: test bytesTransferred
    }

    /**
     * Test the property 'transferred'
     */
    @Test
    public void transferredTest() {
        // TODO: test transferred
    }

    /**
     * Test the property 'bytesReceived'
     */
    @Test
    public void bytesReceivedTest() {
        // TODO: test bytesReceived
    }

    /**
     * Test the property 'flowFilesReceived'
     */
    @Test
    public void flowFilesReceivedTest() {
        // TODO: test flowFilesReceived
    }

    /**
     * Test the property 'received'
     */
    @Test
    public void receivedTest() {
        // TODO: test received
    }

    /**
     * Test the property 'bytesSent'
     */
    @Test
    public void bytesSentTest() {
        // TODO: test bytesSent
    }

    /**
     * Test the property 'flowFilesSent'
     */
    @Test
    public void flowFilesSentTest() {
        // TODO: test flowFilesSent
    }

    /**
     * Test the property 'sent'
     */
    @Test
    public void sentTest() {
        // TODO: test sent
    }

    /**
     * Test the property 'activeThreadCount'
     */
    @Test
    public void activeThreadCountTest() {
        // TODO: test activeThreadCount
    }

    /**
     * Test the property 'terminatedThreadCount'
     */
    @Test
    public void terminatedThreadCountTest() {
        // TODO: test terminatedThreadCount
    }

}
