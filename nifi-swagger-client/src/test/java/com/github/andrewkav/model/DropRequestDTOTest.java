/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for DropRequestDTO
 */
public class DropRequestDTOTest {
    private final DropRequestDTO model = new DropRequestDTO();

    /**
     * Model tests for DropRequestDTO
     */
    @Test
    public void testDropRequestDTO() {
        // TODO: test DropRequestDTO
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'uri'
     */
    @Test
    public void uriTest() {
        // TODO: test uri
    }

    /**
     * Test the property 'submissionTime'
     */
    @Test
    public void submissionTimeTest() {
        // TODO: test submissionTime
    }

    /**
     * Test the property 'lastUpdated'
     */
    @Test
    public void lastUpdatedTest() {
        // TODO: test lastUpdated
    }

    /**
     * Test the property 'percentCompleted'
     */
    @Test
    public void percentCompletedTest() {
        // TODO: test percentCompleted
    }

    /**
     * Test the property 'finished'
     */
    @Test
    public void finishedTest() {
        // TODO: test finished
    }

    /**
     * Test the property 'failureReason'
     */
    @Test
    public void failureReasonTest() {
        // TODO: test failureReason
    }

    /**
     * Test the property 'currentCount'
     */
    @Test
    public void currentCountTest() {
        // TODO: test currentCount
    }

    /**
     * Test the property 'currentSize'
     */
    @Test
    public void currentSizeTest() {
        // TODO: test currentSize
    }

    /**
     * Test the property 'current'
     */
    @Test
    public void currentTest() {
        // TODO: test current
    }

    /**
     * Test the property 'originalCount'
     */
    @Test
    public void originalCountTest() {
        // TODO: test originalCount
    }

    /**
     * Test the property 'originalSize'
     */
    @Test
    public void originalSizeTest() {
        // TODO: test originalSize
    }

    /**
     * Test the property 'original'
     */
    @Test
    public void originalTest() {
        // TODO: test original
    }

    /**
     * Test the property 'droppedCount'
     */
    @Test
    public void droppedCountTest() {
        // TODO: test droppedCount
    }

    /**
     * Test the property 'droppedSize'
     */
    @Test
    public void droppedSizeTest() {
        // TODO: test droppedSize
    }

    /**
     * Test the property 'dropped'
     */
    @Test
    public void droppedTest() {
        // TODO: test dropped
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

}
