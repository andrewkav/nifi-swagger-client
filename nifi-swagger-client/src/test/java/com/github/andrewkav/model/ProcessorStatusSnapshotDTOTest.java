/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ProcessorStatusSnapshotDTO
 */
public class ProcessorStatusSnapshotDTOTest {
    private final ProcessorStatusSnapshotDTO model = new ProcessorStatusSnapshotDTO();

    /**
     * Model tests for ProcessorStatusSnapshotDTO
     */
    @Test
    public void testProcessorStatusSnapshotDTO() {
        // TODO: test ProcessorStatusSnapshotDTO
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'groupId'
     */
    @Test
    public void groupIdTest() {
        // TODO: test groupId
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'runStatus'
     */
    @Test
    public void runStatusTest() {
        // TODO: test runStatus
    }

    /**
     * Test the property 'executionNode'
     */
    @Test
    public void executionNodeTest() {
        // TODO: test executionNode
    }

    /**
     * Test the property 'bytesRead'
     */
    @Test
    public void bytesReadTest() {
        // TODO: test bytesRead
    }

    /**
     * Test the property 'bytesWritten'
     */
    @Test
    public void bytesWrittenTest() {
        // TODO: test bytesWritten
    }

    /**
     * Test the property 'read'
     */
    @Test
    public void readTest() {
        // TODO: test read
    }

    /**
     * Test the property 'written'
     */
    @Test
    public void writtenTest() {
        // TODO: test written
    }

    /**
     * Test the property 'flowFilesIn'
     */
    @Test
    public void flowFilesInTest() {
        // TODO: test flowFilesIn
    }

    /**
     * Test the property 'bytesIn'
     */
    @Test
    public void bytesInTest() {
        // TODO: test bytesIn
    }

    /**
     * Test the property 'input'
     */
    @Test
    public void inputTest() {
        // TODO: test input
    }

    /**
     * Test the property 'flowFilesOut'
     */
    @Test
    public void flowFilesOutTest() {
        // TODO: test flowFilesOut
    }

    /**
     * Test the property 'bytesOut'
     */
    @Test
    public void bytesOutTest() {
        // TODO: test bytesOut
    }

    /**
     * Test the property 'output'
     */
    @Test
    public void outputTest() {
        // TODO: test output
    }

    /**
     * Test the property 'taskCount'
     */
    @Test
    public void taskCountTest() {
        // TODO: test taskCount
    }

    /**
     * Test the property 'tasksDurationNanos'
     */
    @Test
    public void tasksDurationNanosTest() {
        // TODO: test tasksDurationNanos
    }

    /**
     * Test the property 'tasks'
     */
    @Test
    public void tasksTest() {
        // TODO: test tasks
    }

    /**
     * Test the property 'tasksDuration'
     */
    @Test
    public void tasksDurationTest() {
        // TODO: test tasksDuration
    }

    /**
     * Test the property 'activeThreadCount'
     */
    @Test
    public void activeThreadCountTest() {
        // TODO: test activeThreadCount
    }

    /**
     * Test the property 'terminatedThreadCount'
     */
    @Test
    public void terminatedThreadCountTest() {
        // TODO: test terminatedThreadCount
    }

}
