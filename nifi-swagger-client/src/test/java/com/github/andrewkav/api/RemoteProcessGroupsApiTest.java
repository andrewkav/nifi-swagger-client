/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.9.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.andrewkav.api;

import com.github.andrewkav.ApiException;
import com.github.andrewkav.model.RemotePortRunStatusEntity;
import com.github.andrewkav.model.RemoteProcessGroupEntity;
import com.github.andrewkav.model.RemoteProcessGroupPortEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RemoteProcessGroupsApi
 */
@Ignore
public class RemoteProcessGroupsApiTest {

    private final RemoteProcessGroupsApi api = new RemoteProcessGroupsApi();

    
    /**
     * Gets a remote process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemoteProcessGroupTest() throws ApiException {
        String id = null;
        RemoteProcessGroupEntity response = api.getRemoteProcessGroup(id);

        // TODO: test validations
    }
    
    /**
     * Deletes a remote process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeRemoteProcessGroupTest() throws ApiException {
        String id = null;
        String version = null;
        String clientId = null;
        Boolean disconnectedNodeAcknowledged = null;
        RemoteProcessGroupEntity response = api.removeRemoteProcessGroup(id, version, clientId, disconnectedNodeAcknowledged);

        // TODO: test validations
    }
    
    /**
     * Updates a remote process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemoteProcessGroupTest() throws ApiException {
        String id = null;
        RemoteProcessGroupEntity body = null;
        RemoteProcessGroupEntity response = api.updateRemoteProcessGroup(id, body);

        // TODO: test validations
    }
    
    /**
     * Updates a remote port
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemoteProcessGroupInputPortTest() throws ApiException {
        String id = null;
        String portId = null;
        RemoteProcessGroupPortEntity body = null;
        RemoteProcessGroupPortEntity response = api.updateRemoteProcessGroupInputPort(id, portId, body);

        // TODO: test validations
    }
    
    /**
     * Updates run status of a remote port
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemoteProcessGroupInputPortRunStatusTest() throws ApiException {
        String id = null;
        String portId = null;
        RemotePortRunStatusEntity body = null;
        RemoteProcessGroupPortEntity response = api.updateRemoteProcessGroupInputPortRunStatus(id, portId, body);

        // TODO: test validations
    }
    
    /**
     * Updates a remote port
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemoteProcessGroupOutputPortTest() throws ApiException {
        String id = null;
        String portId = null;
        RemoteProcessGroupPortEntity body = null;
        RemoteProcessGroupPortEntity response = api.updateRemoteProcessGroupOutputPort(id, portId, body);

        // TODO: test validations
    }
    
    /**
     * Updates run status of a remote port
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemoteProcessGroupOutputPortRunStatusTest() throws ApiException {
        String id = null;
        String portId = null;
        RemotePortRunStatusEntity body = null;
        RemoteProcessGroupPortEntity response = api.updateRemoteProcessGroupOutputPortRunStatus(id, portId, body);

        // TODO: test validations
    }
    
    /**
     * Updates run status of a remote process group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemoteProcessGroupRunStatusTest() throws ApiException {
        String id = null;
        RemotePortRunStatusEntity body = null;
        RemoteProcessGroupEntity response = api.updateRemoteProcessGroupRunStatus(id, body);

        // TODO: test validations
    }
    
}
